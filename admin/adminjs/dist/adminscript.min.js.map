{"version":3,"sources":["adminscript.js"],"names":["sourceIPs","destinationIPs","protocols","sourcePorts","readCSV","url","fetch","then","response","parseCSV","data","forEach","row","push","Source_Address","Destination_Address","Protocol","Source_Port","destinationPorts","Destination_Port","Lengths","document","getElementById","innerHTML","join","lengths","headers","rows","parsedData","split","values","map","header","rowData","index","Chart","elementId","labels","label","type","getContext","ctx","datasets","backgroundColor","borderColor","borderWidth","maintainAspectRatio","scales","y","beginAtZero","generateBarChart"],"mappings":"aACA,IAAMA,UAAY,GADlBC,eAAA,GACMD,UAAN,GACMC,YAAc,GACdC,iBAAN,GACMC,QAAW,GAKjB,SAASC,QAAQC,GAAjBC,MAASF,GACCC,KACDE,SAAAA,GAAK,OAAAC,EAAAA,SAAQD,KAAIC,SAAAA,GAEdC,SAAAC,GAImBC,QAAA,SAAAC,GACLC,UAASC,KAAAA,EAAAA,gBACnBb,eAAwBc,KAAAA,EAAAA,qBACdF,UAASG,KAAAA,EAAnBA,UACAb,YAAqBc,KAAAA,EAAAA,aACrBC,iBAA0BC,KAAAA,EAAAA,kBAClBN,QAASO,KAAAA,EAAjBA,WAKIC,SAACC,eAAe,aAAkBC,UAAYtB,UAAAA,KAAeuB,QAC7DH,SAACC,eAAe,kBAAyBpB,UAAUsB,eAA3DA,KAAA,QACQH,SAACC,eAAe,aAAeC,UAAYpB,UAAAqB,KAAiB,QAC5DH,SAACC,eAAe,eAAoBC,UAAYL,YAAAA,KAAiBM,QACjEH,SAACC,eAAe,oBAAuBG,UAAaP,iBAA5DM,KAAA,QAtBRH,SAwBWC,eAAS,WAAAC,UAAAE,QAAAD,KAAA,UAzBxB,MA2BqBF,SAAAA,GAEDD,SAACC,eAAe,aAAaC,UAAY,gBAAqBC,KAAtE,QACQH,SAACC,eAAe,kBAAxBC,UAAmD,gBAAAC,KAAnD,QACQH,SAACC,eAAe,aAAoBC,UAAY,gBAAgBC,KAAK,QACrEH,SAACC,eAAe,eAAuBC,UAAA,gBAA/CC,KAAA,QA/BRH,SAAAC,eAAA,oBAAAC,UAAA,gBAAAC,KAAA,QAmCJH,SAAAC,eAAA,WAAAC,UAAA,gBAAAC,KAAA,UAGE,SAAME,SAAUC,GAChB,IAAMC,EAAAA,EAAaD,OAAAE,MAAS,MAClBC,EAASlB,EAAIiB,QAAnBA,MAAA,KAOJ,OANIF,EAAAI,IAAA,SAAAnB,GACAc,IAAQf,EAAQC,EAAAiB,MAACG,KACbC,EAAA,GAIR,OALIP,EAAAf,QAAA,SAAAqB,EAAAE,GAGAD,EAAAD,GAAAF,EAAAI,KAEGN,IAMP,SAAIO,iBAAWC,EAAAC,EAAA3B,EAAA4B,GACbC,IAAAA,EAAMlB,SADOC,eAAAc,GAAAI,WAAA,MAEb9B,IAAAA,MAAM+B,EAAA,CACJJ,KAAAA,OACAK,KAAAA,CACEJ,OAAKD,EACL3B,SAAMA,CAAAA,CACNiC,MAAAA,EACAC,KAAAA,EACAC,gBAAa,0BALLD,YAAA,wBAJCC,YAAA,KAcXC,QAAAA,CACAC,YAAQ,EACNC,qBAAG,EACDC,OAAAA,CADCD,EAAA,CADGC,aAAA,OAadC,QAAAA,gDAGAA,iBAAiB,gBAAiB/C,UAAlBsB,QAAA,kBAChByB,iBAAiB,gBAAiBhC,eAAlBO,QAAA,kBAFhByB,iBAAiB,gBAAiBhD,UAAWuB,QAAS,kBACtDyB,iBAAiB,gBAAiB/C,YAAasB,QAAS,kBACxDyB,iBAAiB,gBAAiBhC,iBAAkBO,QAAS","file":"adminscript.min.js","sourcesContent":["// Declare Empty Lists To Store Parsed Data\r\nconst sourceIPs = [];\r\nconst destinationIPs = [];\r\nconst protocols = [];\r\nconst sourcePorts = [];\r\nconst destinationPorts = [];\r\nconst lengths = [];\r\n\r\n// Function to read and parse CSV data\r\nfunction readCSV(url) {\r\n    fetch(url)\r\n        .then(response => response.text())\r\n        .then(data => {\r\n            // Parse the CSV data\r\n            const parsedData = parseCSV(data);\r\n\r\n            // Populate the arrays with the parsed data\r\n            parsedData.forEach(row => {\r\n                sourceIPs.push(row.Source_Address);\r\n                destinationIPs.push(row.Destination_Address);\r\n                protocols.push(row.Protocol);\r\n                sourcePorts.push(row.Source_Port);\r\n                destinationPorts.push(row.Destination_Port);\r\n                lengths.push(row.Lengths);\r\n            });\r\n\r\n            // Display the stored data in HTML elements\r\n            document.getElementById('sourceIPs').innerHTML = sourceIPs.join('<br>');\r\n            document.getElementById('destinationIPs').innerHTML = destinationIPs.join('<br>');\r\n            document.getElementById('protocols').innerHTML = protocols.join('<br>');\r\n            document.getElementById('sourcePorts').innerHTML = sourcePorts.join('<br>');\r\n            document.getElementById('destinationPorts').innerHTML = destinationPorts.join('<br>');\r\n            document.getElementById('lengths').innerHTML = lengths.join('<br>');\r\n        })\r\n        .catch(error => {\r\n            // Display the stored data in HTML elements\r\n            document.getElementById('sourceIPs').innerHTML = \"Error Parsing\".join('<br>');\r\n            document.getElementById('destinationIPs').innerHTML = \"Error Parsing\".join('<br>');\r\n            document.getElementById('protocols').innerHTML = \"Error Parsing\".join('<br>');\r\n            document.getElementById('sourcePorts').innerHTML = \"Error Parsing\".join('<br>');\r\n            document.getElementById('destinationPorts').innerHTML = \"Error Parsing\".join('<br>');\r\n            document.getElementById('lengths').innerHTML = \"Error Parsing\".join('<br>');\r\n        });\r\n}\r\n\r\n// Function to parse CSV data\r\nfunction parseCSV(data) {\r\n  const rows = data.trim().split('\\n');\r\n  const headers = rows.shift().split(',');\r\n  const parsedData = rows.map(row => {\r\n      const values = row.split(',');\r\n      const rowData = {};\r\n      headers.forEach((header, index) => {\r\n          rowData[header] = values[index];\r\n      });\r\n      return rowData;\r\n  });\r\n  return parsedData;\r\n}\r\n\r\n// Function to generate a bar chart\r\nfunction generateBarChart(elementId, labels, data, label) {\r\n  var ctx = document.getElementById(elementId).getContext('2d');\r\n  new Chart(ctx, {\r\n    type: 'line',\r\n    data: {\r\n      labels: labels,\r\n      datasets: [{\r\n        label: label,\r\n        data: data,\r\n        backgroundColor: 'rgba(54, 162, 235, 0.6)',\r\n        borderColor: 'rgba(54, 162, 235, 1)',\r\n        borderWidth: 1\r\n      }]\r\n    },\r\n    options: {\r\n      responsive: true,\r\n      maintainAspectRatio: true,\r\n      scales: {\r\n        y: {\r\n          beginAtZero: true\r\n        }\r\n      }\r\n    }\r\n  });\r\n}\r\n\r\n// Call the readCSV function with the URL of your CSV file\r\nreadCSV('adminjs/network_data/localnetworktraffic.csv');\r\n\r\n// Generate bar charts for each feature\r\ngenerateBarChart(\"feature1Chart\", sourceIPs, lengths, \"Packet Lengths\");\r\ngenerateBarChart(\"feature2Chart\", destinationIPs, lengths, \"Packet Lengths\");\r\ngenerateBarChart(\"feature3Chart\", protocols, lengths, \"Packet Lengths\");\r\ngenerateBarChart(\"feature4Chart\", sourcePorts, lengths, \"Packet Lengths\");\r\ngenerateBarChart(\"feature5Chart\", destinationPorts, lengths, \"Packet Lengths\");"]}